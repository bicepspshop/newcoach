"""
Script to check and adapt to existing Supabase database structure
"""

import asyncio
import os
from dotenv import load_dotenv
from database.connection import DatabaseManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_database_structure():
    """Check existing database structure and adapt if needed"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = DatabaseManager()
    
    try:
        await db.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
        tables_query = """
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        ORDER BY table_name;
        """
        tables = await db.fetch_all(tables_query)
        
        existing_tables = []
        for table in tables:
            table_name = table['table_name']
            existing_tables.append(table_name)
            print(f"  ‚úì {table_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        key_tables = ['coaches', 'clients', 'workouts', 'trainer_client']
        
        for table_name in key_tables:
            if table_name in existing_tables:
                print(f"\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:")
                structure = await db.get_table_structure(table_name)
                for col in structure:
                    nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                    print(f"    {col['column_name']}: {col['data_type']} {nullable}")
            else:
                print(f"\n‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ coaches
        print(f"\nüë§ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ coaches:")
        coaches = await db.fetch_all("SELECT * FROM coaches LIMIT 5")
        for coach in coaches:
            print(f"    ID: {coach['id']}, Telegram: {coach['telegram_id']}, Name: {coach['name']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await add_missing_columns(db, existing_tables)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        await test_database_operations(db)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        await db.disconnect()

async def add_missing_columns(db, existing_tables):
    """Add missing columns to existing tables"""
    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ coaches –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'coaches' in existing_tables:
            alter_queries = [
                "ALTER TABLE coaches ADD COLUMN IF NOT EXISTS created_at timestamptz DEFAULT NOW()",
                "ALTER TABLE coaches ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT NOW()"
            ]
            for query in alter_queries:
                try:
                    await db.execute_query(query)
                    print(f"    ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0] if 'ADD COLUMN' in query else 'ALTER'}")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0] if 'ADD COLUMN' in query else 'ALTER'}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ clients –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'clients' in existing_tables:
            alter_queries = [
                "ALTER TABLE clients ADD COLUMN IF NOT EXISTS coach_id integer",
                "ALTER TABLE clients ADD COLUMN IF NOT EXISTS fitness_goal varchar(100)",
                "ALTER TABLE clients ADD COLUMN IF NOT EXISTS created_at timestamptz DEFAULT NOW()",
                "ALTER TABLE clients ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT NOW()"
            ]
            for query in alter_queries:
                try:
                    await db.execute_query(query)
                    print(f"    ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]}")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]}: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ workouts –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'workouts' in existing_tables:
            alter_queries = [
                "ALTER TABLE workouts ADD COLUMN IF NOT EXISTS coach_id integer",
                "ALTER TABLE workouts ADD COLUMN IF NOT EXISTS status varchar(20) DEFAULT 'planned'",
                "ALTER TABLE workouts ADD COLUMN IF NOT EXISTS workout_type varchar(50)",
                "ALTER TABLE workouts ADD COLUMN IF NOT EXISTS created_at timestamptz DEFAULT NOW()",
                "ALTER TABLE workouts ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT NOW()"
            ]
            for query in alter_queries:
                try:
                    await db.execute_query(query)
                    print(f"    ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]}")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è {query.split('ADD COLUMN IF NOT EXISTS')[1].split()[0]}: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞")
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")

async def test_database_operations(db):
    """Test basic database operations"""
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
        coach = await db.get_coach_by_telegram_id("234104161")
        if coach:
            print(f"    ‚úì –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–Ω–µ—Ä: {coach['name']} (ID: {coach['id']})")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients = await db.get_clients_for_coach(coach['id'])
            print(f"    ‚úì –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            workouts = await db.get_workouts_for_coach(coach['id'])
            print(f"    ‚úì –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(workouts)}")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await db.get_stats_for_coach(coach['id'])
            print(f"    ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        else:
            print(f"    ‚ö†Ô∏è –¢—Ä–µ–Ω–µ—Ä —Å ID 234104161 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(check_database_structure())
