"""
Database initialization script for Supabase
Creates necessary tables for Coach Assistant Bot
"""

import asyncio
import os
from dotenv import load_dotenv
from database.connection import DatabaseManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def init_database():
    """Initialize database with required tables"""
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...")
    
    db = DatabaseManager()
    
    try:
        await db.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # Create coaches table
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã coaches...")
        await db.execute_query("""
            CREATE TABLE IF NOT EXISTS coaches (
                id SERIAL PRIMARY KEY,
                telegram_id VARCHAR(50) UNIQUE NOT NULL,
                name VARCHAR(100) NOT NULL,
                username VARCHAR(50),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)
        
        # Create clients table
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients...")
        await db.execute_query("""
            CREATE TABLE IF NOT EXISTS clients (
                id SERIAL PRIMARY KEY,
                coach_id INTEGER REFERENCES coaches(id) ON DELETE CASCADE,
                name VARCHAR(100) NOT NULL,
                telegram_id VARCHAR(50),
                phone VARCHAR(20),
                notes TEXT,
                fitness_goal VARCHAR(50),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)
        
        # Create workouts table
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã workouts...")
        await db.execute_query("""
            CREATE TABLE IF NOT EXISTS workouts (
                id SERIAL PRIMARY KEY,
                coach_id INTEGER REFERENCES coaches(id) ON DELETE CASCADE,
                client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
                date TIMESTAMP WITH TIME ZONE NOT NULL,
                exercises JSONB DEFAULT '[]',
                notes TEXT,
                workout_type VARCHAR(50),
                status VARCHAR(20) DEFAULT 'planned',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)
        
        # Create indexes
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        await db.execute_query("CREATE INDEX IF NOT EXISTS idx_coaches_telegram_id ON coaches(telegram_id)")
        await db.execute_query("CREATE INDEX IF NOT EXISTS idx_clients_coach_id ON clients(coach_id)")
        await db.execute_query("CREATE INDEX IF NOT EXISTS idx_workouts_coach_id ON workouts(coach_id)")
        await db.execute_query("CREATE INDEX IF NOT EXISTS idx_workouts_client_id ON workouts(client_id)")
        await db.execute_query("CREATE INDEX IF NOT EXISTS idx_workouts_date ON workouts(date)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        tables = await db.fetch_all("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            AND table_name IN ('coaches', 'clients', 'workouts')
            ORDER BY table_name;
        """)
        
        for table in tables:
            print(f"  ‚úì {table['table_name']}")
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("\nüéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("  ‚Ä¢ –ë–æ—Ç: python main.py")
        print("  ‚Ä¢ –í–µ–±-—Å–µ—Ä–≤–µ—Ä: python server.py")
        print(f"  ‚Ä¢ Supabase URL: https://nludsxoqhhlfpehhblgg.supabase.co")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        raise
    finally:
        await db.disconnect()

if __name__ == "__main__":
    asyncio.run(init_database())
