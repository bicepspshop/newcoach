#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Coach Assistant Bot
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–æ–ª—å–∫–æ —Å HTTP API
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any

# –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simple_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class SimpleBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.web_app_url = os.getenv('WEB_APP_URL', 'https://bicepspshop.github.io/newcoach/')
        
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
        # Database setup (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        try:
            from database.connection_fallback import simple_db
            self.db = simple_db
            logger.info("‚úÖ Database connected via HTTP API")
        except ImportError as e:
            logger.error(f"‚ùå Cannot import database: {e}")
            self.db = None
    
    def make_request(self, method: str, data: Dict = None) -> Optional[Dict]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        try:
            url = f"{self.base_url}/{method}"
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Telegram API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Request error: {e}")
            return None
    
    def send_message(self, chat_id: int, text: str, reply_markup: Dict = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = reply_markup
        
        result = self.make_request('sendMessage', data)
        return result is not None
    
    def create_inline_keyboard(self, buttons: list) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        return {
            'inline_keyboard': buttons
        }
    
    def create_button(self, text: str, callback_data: str = None, web_app_url: str = None) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É"""
        button = {'text': text}
        
        if callback_data:
            button['callback_data'] = callback_data
        elif web_app_url:
            button['web_app'] = {'url': web_app_url}
            
        return button
    
    def handle_start(self, chat_id: int, user_data: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start"""
        user_id = str(user_data.get('id', ''))
        first_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = user_data.get('username')
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        if self.db:
            try:
                coach = self.db.get_coach_by_telegram_id(user_id)
                if not coach:
                    name = f"{first_name} {user_data.get('last_name', '')}".strip()
                    coach_id = self.db.create_coach(user_id, name, username)
                    logger.info(f"New coach registered: {name} (ID: {coach_id})")
                    
                    text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coach Assistant!</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä.

üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ üí™ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫  
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!
"""
                else:
                    text = f"""
üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {coach['name']}!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            except Exception as e:
                logger.error(f"Database error: {e}")
                text = f"""
ü§ñ <b>Coach Assistant</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–µ–π—á–∞—Å –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
"""
        else:
            text = f"""
ü§ñ <b>Coach Assistant</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}! 

–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.create_inline_keyboard([
            [
                self.create_button("üë• –ö–ª–∏–µ–Ω—Ç—ã", "clients"),
                self.create_button("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "workouts")
            ],
            [
                self.create_button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
                self.create_button("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app_url=self.web_app_url)
            ],
            [
                self.create_button("‚ùì –ü–æ–º–æ—â—å", "help")
            ]
        ])
        
        return self.send_message(chat_id, text, keyboard)
    
    def handle_callback(self, chat_id: int, message_id: int, callback_data: str, user_data: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query"""
        if callback_data == "clients":
            text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</b>

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ:

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –Ω–∏–∂–µ.
"""
        elif callback_data == "workouts":
            text = """
üí™ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>

–í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ:

‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã!
"""
        elif callback_data == "stats":
            text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:

‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã

–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!
"""
        elif callback_data == "help":
            text = """
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>Coach Assistant</b> - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üåê <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
"""
        else:
            text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = self.create_inline_keyboard([
            [self.create_button("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app_url=self.web_app_url)],
            [self.create_button("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start")]
        ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'reply_markup': keyboard,
            'parse_mode': 'HTML'
        }
        
        result = self.make_request('editMessageText', data)
        return result is not None
    
    def get_updates(self, offset: int = 0) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        data = {
            'offset': offset,
            'timeout': 30,
            'allowed_updates': ['message', 'callback_query']
        }
        
        result = self.make_request('getUpdates', data)
        if result and result.get('ok'):
            return result.get('result', [])
        return []
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("üöÄ Simple Coach Assistant Bot starting...")
        logger.info(f"üåê Web App URL: {self.web_app_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = self.make_request('getMe')
        if not result or not result.get('ok'):
            logger.error("‚ùå Cannot connect to Telegram API")
            return
        
        bot_info = result.get('result', {})
        logger.info(f"‚úÖ Bot connected: @{bot_info.get('username')}")
        
        offset = 0
        
        try:
            while True:
                updates = self.get_updates(offset)
                
                for update in updates:
                    offset = update['update_id'] + 1
                    
                    try:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                        if 'message' in update:
                            message = update['message']
                            chat_id = message['chat']['id']
                            user_data = message['from']
                            text = message.get('text', '')
                            
                            if text.startswith('/start'):
                                self.handle_start(chat_id, user_data)
                            elif text.startswith('/help'):
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º help –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                help_text = """
‚ùì <b>–ü–æ–º–æ—â—å Coach Assistant</b>

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üåê <b>–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.

üí° –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.
"""
                                keyboard = self.create_inline_keyboard([
                                    [self.create_button("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app_url=self.web_app_url)],
                                    [self.create_button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start")]
                                ])
                                self.send_message(chat_id, help_text, keyboard)
                            else:
                                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                self.send_message(chat_id, "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
                        elif 'callback_query' in update:
                            callback = update['callback_query']
                            chat_id = callback['message']['chat']['id']
                            message_id = callback['message']['message_id']
                            callback_data = callback['data']
                            user_data = callback['from']
                            
                            if callback_data == "start":
                                self.handle_start(chat_id, user_data)
                            else:
                                self.handle_callback(chat_id, message_id, callback_data, user_data)
                            
                            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
                            self.make_request('answerCallbackQuery', {
                                'callback_query_id': callback['id']
                            })
                            
                    except Exception as e:
                        logger.error(f"Error processing update: {e}")
                        continue
                        
        except KeyboardInterrupt:
            logger.info("üëã Bot stopped by user")
        except Exception as e:
            logger.error(f"üí• Bot error: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleBot()
        bot.run()
    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
