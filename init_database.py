import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase"""
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = await asyncpg.connect(database_url)
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        sql_commands = [
            """
            CREATE TABLE IF NOT EXISTS coaches (
                id SERIAL PRIMARY KEY,
                telegram_id VARCHAR(20) UNIQUE NOT NULL,
                name VARCHAR(100) NOT NULL,
                username VARCHAR(100),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS clients (
                id SERIAL PRIMARY KEY,
                coach_id INTEGER REFERENCES coaches(id) ON DELETE CASCADE,
                name VARCHAR(100) NOT NULL,
                telegram_id VARCHAR(20),
                phone VARCHAR(20),
                notes TEXT,
                fitness_goal TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS workouts (
                id SERIAL PRIMARY KEY,
                coach_id INTEGER REFERENCES coaches(id) ON DELETE CASCADE,
                client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
                date TIMESTAMP WITH TIME ZONE NOT NULL,
                exercises JSONB DEFAULT '[]',
                notes TEXT,
                workout_type VARCHAR(50),
                status VARCHAR(20) DEFAULT 'planned',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_coaches_telegram_id ON coaches(telegram_id);
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_clients_coach_id ON clients(coach_id);
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_workouts_coach_id ON workouts(coach_id);
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_workouts_client_id ON workouts(client_id);
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_workouts_date ON workouts(date);
            """
        ]
        
        for sql in sql_commands:
            await conn.execute(sql)
            print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ SQL")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name;
        """)
        
        for table in tables:
            print(f"  ‚úì {table['table_name']}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...")
        try:
            await conn.execute("""
                INSERT INTO coaches (telegram_id, name, username) 
                VALUES ('test_coach', '–¢–µ—Å—Ç–æ–≤—ã–π –¢—Ä–µ–Ω–µ—Ä', 'test_coach')
                ON CONFLICT (telegram_id) DO NOTHING;
            """)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        await conn.close()
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üîó –í–∞—à –ø—Ä–æ–µ–∫—Ç Supabase –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ:")
        print(f"   URL: https://nludsxoqhhlfpehhblgg.supabase.co")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == "__main__":
    asyncio.run(init_database())
